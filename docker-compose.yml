# Docker Compose for AI Fitness Coach Production Database
# Includes PostgreSQL, Redis, and optional monitoring

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fitness_coach_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fitness_coach}
      POSTGRES_USER: ${DB_USER:-fitness_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fitness_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - fitness_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fitness_user} -d ${DB_NAME:-fitness_coach}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: fitness_coach_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - fitness_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AI Fitness Coach Application
  fitness_coach:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fitness_coach_app
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fitness_coach}
      DB_USER: ${DB_USER:-fitness_user}
      DB_PASSWORD: ${DB_PASSWORD:-fitness_password_2024}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_2024}
      
      # Application Configuration
      APP_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_here_change_in_production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # File Storage
      UPLOAD_DIR: /app/uploads
      PLUGIN_DIR: /app/plugins
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - app_uploads:/app/uploads
      - app_plugins:/app/plugins
      - app_logs:/app/logs
    ports:
      - "${APP_PORT:-8000}:8000"
    networks:
      - fitness_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: fitness_coach_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - fitness_network
    depends_on:
      - fitness_coach
    profiles:
      - with-nginx

  # Database Backup Service
  postgres_backup:
    image: postgres:15-alpine
    container_name: fitness_coach_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-fitness_password_2024}
    volumes:
      - backup_data:/backup
      - ./scripts/backup_db.sh:/backup_db.sh:ro
    networks:
      - fitness_network
    depends_on:
      - postgres
    profiles:
      - backup
    command: |
      sh -c "
        echo 'Setting up backup cron job...'
        echo '0 2 * * * /backup_db.sh' | crontab -
        crond -f
      "

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fitness_coach_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fitness_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fitness_coach_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password_2024}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    networks:
      - fitness_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_plugins:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fitness_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16